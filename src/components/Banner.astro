---
interface Props {
  imgSrc: string;
  title: string;
}

const { imgSrc, title } = Astro.props;

const src = `url(${imgSrc})`;
---

<section class="container_box hero">
  <div class="hero__images">
    <img class="hero__image" src={imgSrc} />
  </div>
  <div class="hero__content">
    <div class="hero__headline font-serif"><span>{title}</span></div>
  </div>
</section>

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);
  gsap.to('.hero', {
    scrollTrigger: {
      trigger: '.hero',
      scrub: true,
      pin: true,
      start: '0',
      end: '50%',
      toggleClass: 'active',
    },
  });
  gsap.to('.hero__image', {
    scrollTrigger: {
      trigger: '.hero',
      scrub: 0.5,
      start: 'top bottom',
      end: 'bottom -100%',
    },
    y: '-15%',
  });
</script>

<style is:global define:vars={{ img_src: src }}>
  .container_box {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100vh;
    color: white;
    text-align: center;
  }

  .container__headline {
    font-size: 5vmin;
  }

  .hero__inner {
    display: flex;
    position: relative;
    width: 100vw;
    max-height: 100vh;
    overflow: hidden;

    &::before {
      content: '';
      display: block;
      padding-bottom: calc(100% / (16 / 9));
    }
  }

  .hero__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 120%;
    object-fit: cover;
  }

  .hero__content {
    display: none;
    position: absolute;
    right: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .hero__headline {
    --padding: 1.5vmin;
    --duration: 400ms;
    --delay: calc(var(--duration) / 2);
    --ease: cubic-bezier(0.25, 1, 0.5, 1);

    position: relative;
    display: inline-block;
    font-size: 10vmin;
    overflow: hidden;
    margin-top: calc(var(--padding) * -1);
    padding: var(--padding);

    &::after {
      content: '';
      position: absolute;
      top: calc(100% - var(--padding));
      left: 0;
      background-color: white;
      width: 100%;
      height: 0.7vmin;
      transform: scaleX(0);
      transition: transform var(--duration) var(--delay) var(--ease);
    }

    span {
      display: block;
      transform: translateY(110%);
      transition: transform var(--duration) var(--ease);
    }

    .active & {
      &::after {
        transform: scaleX(1);
      }
      span {
        transform: translateY(0);
        transition-delay: var(--delay);
      }
    }
  }
</style>
