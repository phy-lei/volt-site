---
interface Props {
  imgSrc: string;
  title: string;
}

const { imgSrc, title } = Astro.props;

const src = `url(${imgSrc})`;
---

<section class="container_box hero active">
  <div
    class="w-100% h-100% bg-no-repeat bg-cover bg-center flex"
    style={{ backgroundImage: src }}
  >
  </div>
  <div class="hero__content">
    <div class="hero__headline">
      <span class="font-serif volt-title">{title}</span>
    </div>
  </div>
</section>

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);
  const t1 = gsap.timeline({
    scrollTrigger: {
      trigger: '.hero',
      scrub: true,
      // pin: true,
      start: '4% top',
      end: 'bottom -100%',
      toggleClass: 'hide',
      // markers: true,
    },
  });
</script>

<style is:global define:vars={{ img_src: src }}>
  .container_box {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100vh;
    color: white;
    text-align: center;
  }

  .container__headline {
    font-size: 5vmin;
  }

  .hero__inner {
    display: flex;
    position: relative;
    width: 100vw;
    max-height: 100vh;
    overflow: hidden;

    &::before {
      content: '';
      display: block;
      padding-bottom: calc(100% / (16 / 9));
    }
  }

  .hero__content {
    display: none;
    position: absolute;
    right: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .hero__headline {
    --padding: 1.5vmin;
    --duration: 400ms;
    --delay: calc(var(--duration) / 2);
    --ease: cubic-bezier(0.25, 1, 0.5, 1);

    position: relative;
    display: inline-block;
    font-size: 10vmin;
    overflow: hidden;
    margin-top: calc(var(--padding) * -1);
    padding: var(--padding);

    &::after {
      content: '';
      position: absolute;
      top: calc(100% - var(--padding));
      left: 0;
      background-color: white;
      width: 100%;
      height: 0.7vmin;
      transform: scaleX(1);
      transition: transform var(--duration) var(--delay) var(--ease);
    }

    span {
      display: block;
      transform: translateY(0);
      transition: transform var(--duration) var(--ease);
    }

    .hide & {
      &::after {
        transform: scaleX(0);
      }
      span {
        transform: translateY(110%);
        transition-delay: var(--delay);
      }
    }
  }
</style>
