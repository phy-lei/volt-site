---
import Layout from '@/layouts/Layout.astro';
import ContactFooter from '@/components/ContactFooter.astro';
import Banner from '@/components/Banner.astro';

import solution01 from '/src/assets/imgs/solution-case/01.png';
import solution02 from '/src/assets/imgs/solution-case/02.jpg';
import solution03 from '/src/assets/imgs/solution-case/03.png';
import solution04 from '/src/assets/imgs/solution-case/04.jpg';


// 案例图片 后续可能改为后台获取
const caseList = [
  {
    imgUrl: solution01.src,
    title: '上海浦东',
    desc: '11.18KWp',
  },
  {
    imgUrl: solution02.src,
    title: '上海闵行',
    desc: '15.48KWp',
  },
  {
    imgUrl: solution03.src,
    title: '上海宝山 ',
    desc: '20.64KWp',
  },
  {
    imgUrl: solution04.src,
    title: '上海青浦',
    desc: '11.61KWp',
  },
];
---

<Layout title="辐特佳新能源">
  <Banner title="家庭智能解决方案" imgSrc="/img_23.jpg" />
  <section class="intro_1">
    <div class="item">
      <div class="item_content fade-trigger">
        <div class="font-serif item_desc">通过别墅屋顶安装光伏组件，产生可持续性绿色清洁能源。光伏所产生的电力优先业主家庭使用，多余电力通过双向表出售给国家电网。</div>
        <div class="item_name"></div>
        
      </div>
    </div>
  </section>
  <section class="intro_2">
    <div class="item">
      <div class="item_content fade-trigger">
        <div class="font-serif item_desc">
          降低用电成本<br>
          延缓二、三档阶梯电价<br>
          25年以上长期稳定收益
        </div>
        <div class="item_name"></div>
        
      </div>
    </div>
  </section>
  <section class="intro_3">
    <div class="item">
      <div class="item_content fade-trigger">
        <div class="font-serif item_desc">
          屋顶隔热降温，进一步节省能源
        </div>
        <div class="item_name"></div>
      </div>
    </div>
  </section>
  <section class="cases w-100% pt-20 pb-50 section-card-view">
    <h1 class="title font-serif text-center text-size-4xl text-center fade-trigger mb-10">相关案例</h1>
    <div class="h-[280vw] sticky-wrapper fade-trigger">
      <div
        class="sticky w-100% h-auto top-150px overflow-hidden pt-60px box-border"
      >
        <div class="relative flex w-30vw m-[0_auto] gap-12 section-wrapper">
          {
            caseList.map((item) => (
              <div class="relative flex-shrink-0 w-100% h-300px flex justify-center items-center <md:w-80%  section-card">
                <div
                  class="bg-no-repeat bg-cover w-100% h-100%"
                  style={{ backgroundImage: `url(${item.imgUrl})` }}
                />
                <div class="w-100% flex justify-between absolute bottom-0 text-white section-card-title">
                  <h3 class="text-size-xl p-2">{item.title}</h3>
                  <h1 class="text-size-2xl p-2">{item.desc}</h1>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>
  <ContactFooter />
</Layout>

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  const sections = document.querySelectorAll('.section-card-view');

  // 案例轮播
  sections.forEach((section) => {
    const wrapper = section.querySelector('.section-wrapper');
    const stickyWrapper = section.querySelector('.sticky-wrapper');
    const cards = section.querySelectorAll('.section-card');

    const screenWidth = document.documentElement.clientWidth;
    const cardWidth = cards[0].clientWidth;
    const cardMargin = Number(
      window.getComputedStyle(wrapper).getPropertyValue('gap').slice(0, -2)
    );
    const cardsNumber = cards.length;
    const swiperOffset =
      // 距离页面左侧的宽度 * 2
      wrapper.getBoundingClientRect().left * 2 +
      // 每个卡片宽度 * 卡片数量
      cardWidth * cardsNumber +
      // 卡片的左侧距离 * (卡片数量 - 1)
      cardMargin * (cardsNumber - 1) -
      // 屏幕的宽度
      screenWidth;
    const stickyTop = 150;

    gsap.to(wrapper, {
      scrollTrigger: {
        trigger: stickyWrapper,
        start: stickyTop + ' ' + stickyTop,
        end: 'bottom 100%',
        scrub: 0,
      },
      ease: 'none',
      x: -swiperOffset,
    });

    const cardScroll = cardWidth + cardMargin;

    cards.forEach((card, index) => {
      const startTrigger = stickyTop - cardScroll * (index - 1);
      if (index > 0) {
        gsap.to(card, {
          scrollTrigger: {
            trigger: card,
            start: 'top ' + startTrigger,
            end: 'top ' + cardScroll / 4,
            scrub: 0,
          },
          ease: 'none',
          filter: 'blur(0px)',
          scale: 1,
        });
      }
    });
  });
</script>

<style is:global>
  .intro_1,.intro_2,.intro_3 {
    position: relative;
    height: 100vh;
    display: flex;
    align-items: center;
    padding: 80px;
    .item {
      position: absolute;
      top: 20vh;
      left: 10vw;
      /* background-color: pink; */
      display: flex;
      justify-content: center;
      align-items: center;
      height: 40vh;
      width: 40vw;
      overflow: hidden;
      .item_desc {
        font-size: 26px;
        font-weight: 500;
        padding: 30px;
        line-height: 40px;
      }
    }
  }
  .intro_1 {
    background-image: url('/img_18.jpg');
    background-size: cover;
    background-position: center center;
  }
  .intro_2 {
    background-image: url('/img_24.jpg');
    background-size: cover;
    background-position: center center;
  }
  .intro_3 {
    background-image: url('/img_27.jpg');
    background-size: cover;
    background-position: center center;
  }
  .process {
    height: 100vh;
    display: flex;
    align-items: center;
    padding: 80px;
  }
</style>
